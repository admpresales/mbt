/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘SAP_API_BAPI_Check_&_Create_Material.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1 = null;
        public BindDirection bind_dir2 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity16 = null;
        public BindDirection bind_dir3 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity16_Policy = null;
        public BindDirection bind_dir4 = null;
        public BindDirection bind_dir5 = null;
        public BindDirection bind_dir6 = null;
        public BindDirection bind_dir7 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity12 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity12");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity14 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity14");
            _flow.DataExporterCloseActivity15 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity15");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity13 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity13");
            this.DataCursorActivity16 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity16");
            this.DataCursorActivity16_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence11 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence11");
            _flow.RfcCallActivityRT7 = new HP.ST.Ext.SapRT.Activities.RfcCallActivityRT(_context,"RfcCallActivityRT7");
            _flow.IfElse4 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse4Input>(_context,"IfElse4");
            _flow.IfElseBranch5 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch5");
            _flow.IfElseBranch6 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch6");
            _flow.RfcCallActivityRT8 = new HP.ST.Ext.SapRT.Activities.RfcCallActivityRT(_context,"RfcCallActivityRT8");
            _flow.RfcCallActivityRT9 = new HP.ST.Ext.SapRT.Activities.RfcCallActivityRT(_context,"RfcCallActivityRT9");
            _flow.RfcCallActivityRT10 = new HP.ST.Ext.SapRT.Activities.RfcCallActivityRT(_context,"RfcCallActivityRT10");
            _flow.DataFetchActivity12.Comment = @"";
            _flow.DataFetchActivity12.IconPath = @"";
            _flow.DataFetchActivity12.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity12.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity12_QueryParameters_Document = new XmlDocument();
            DataFetchActivity12_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity12Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>745add87-eae3-413f-8a86-39f16217228e</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>MaterialNumbers</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>MaterialNumber,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>100-100^M71913438^JC_06182018</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity12_QueryParameters_Document.LoadXml(xmlDataFetchActivity12Params);
            _flow.DataFetchActivity12.QueryParameters = DataFetchActivity12_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("MaterialNumbers", _flow.DataFetchActivity12);
            this.Activities.Add (_flow.DataFetchActivity12);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyStoreLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyStorePassword = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyPassword = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.MaterialNumbers}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity16.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity16);
            _flow.Loop2.Activities.Add (_flow.Sequence11);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity14.Comment = @"";
            _flow.DataExporterActivity14.IconPath = @"";
            VTDPropertyInfoBase pi1 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1 = new VTDObjectGetter(pi1);
            VTDPropertyInfoBase pi2 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1 = new VTDObjectSetter(pi2);
            binding_setter1 = new StringFormaterDecorator(binding_setter1,"{Step.DataFetchActivity12.OutTable}");
            bind_dir1 = new BindDirection(_flow.DataFetchActivity12,binding_getter1,binding_setter1,BindTargetType.ToInProperty);
            _flow.DataExporterActivity14.InDirections.Add(bind_dir1);
            this.Activities.Add (_flow.DataExporterActivity14);
            _flow.DataExporterCloseActivity15.Comment = @"";
            _flow.DataExporterCloseActivity15.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity15);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity13.Comment = @"";
            _flow.DataDisconnectActivity13.IconPath = @"";
            VTDPropertyInfoBase pi3 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2 = new VTDObjectGetter(pi3);
            VTDPropertyInfoBase pi4 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2 = new VTDObjectSetter(pi4);
            binding_setter2 = new StringFormaterDecorator(binding_setter2,"{Step.DataFetchActivity12.OutTable}");
            bind_dir2 = new BindDirection(_flow.DataFetchActivity12,binding_getter2,binding_setter2,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity13.InDirections.Add(bind_dir2);
            this.Activities.Add (_flow.DataDisconnectActivity13);
            this.DataCursorActivity16.Comment = @"";
            this.DataCursorActivity16.IconPath = @"";
            VTDPropertyInfoBase pi5 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter3 = new VTDObjectGetter(pi5);
            VTDPropertyInfoBase pi6 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter3 = new VTDObjectSetter(pi6);
            binding_setter3 = new StringFormaterDecorator(binding_setter3,"{Step.DataFetchActivity12.OutTable}");
            bind_dir3 = new BindDirection(_flow.DataFetchActivity12,binding_getter3,binding_setter3,BindTargetType.ToInProperty);
            this.DataCursorActivity16.InDirections.Add(bind_dir3);
            this.DataCursorActivity16_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity16_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity16_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity16_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity16_Policy.StartCondition.Value = "";
            this.DataCursorActivity16_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity16_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity16_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity16_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity16_Policy.EndCondition.Value = "";
            this.DataCursorActivity16_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity16_Policy.StepSize = 1;
            this.DataCursorActivity16_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity16.Policy = this.DataCursorActivity16_Policy;
            this.DataCursorActivity16.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity16.ResetCursor;
            _flow.Sequence11.Comment = @"";
            _flow.Sequence11.IconPath = @"";
            _flow.Sequence11.Name = @"Sequence11";
            _flow.Sequence11.Activities.Add (_flow.RfcCallActivityRT7);
            _flow.Sequence11.Activities.Add (_flow.IfElse4);
            XmlDocument RfcCallActivityRT7_InputProperties_Document = new XmlDocument();
            RfcCallActivityRT7_InputProperties_Document.PreserveWhitespace = true;
            RfcCallActivityRT7_InputProperties_Document.LoadXml(
@"<Request><Imports><MATERIAL>{DataSource.MaterialNumbers.MaterialNumber}</MATERIAL></Imports></Request>");
            _flow.RfcCallActivityRT7.InputProperties = RfcCallActivityRT7_InputProperties_Document;
            _flow.RfcCallActivityRT7.Comment = @"";
            _flow.RfcCallActivityRT7.IconPath = @"AddIns\ServiceTest\SAP\ictb_sap_rfc_16.png";
            _flow.RfcCallActivityRT7.Name = @"BAPI_MATERIAL_EXISTENCECHECK";
            _flow.RfcCallActivityRT7.FunctionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.RfcCallActivityRT7.FunctionName}")) ? @"BAPI_MATERIAL_EXISTENCECHECK" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.RfcCallActivityRT7.FunctionName}");
            _flow.RfcCallActivityRT7.Timeout = (int)100000;
            _flow.RfcCallActivityRT7.ExpectException = false;
            _flow.RfcCallActivityRT7.ConnectionInfo.Server = @"156.152.57.19";
            _flow.RfcCallActivityRT7.ConnectionInfo.SystemNumber = @"00";
            _flow.RfcCallActivityRT7.ConnectionInfo.Client = @"800";
            _flow.RfcCallActivityRT7.ConnectionInfo.Username = @"testuser";
            _flow.RfcCallActivityRT7.ConnectionInfo.Password = this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
            _flow.RfcCallActivityRT7.ConnectionInfo.Server = @"156.152.57.19";
            _flow.RfcCallActivityRT7.ConnectionInfo.SystemNumber = @"00";
            _flow.RfcCallActivityRT7.ConnectionInfo.Client = @"800";
            _flow.RfcCallActivityRT7.ConnectionInfo.Username = @"testuser";
            _flow.RfcCallActivityRT7.ConnectionInfo.Password = this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
            _flow.RfcCallActivityRT7.UseTransaction = false;
            VTDPropertyInfoBase pi7 = new VTDPropertyInfoBase("MaterialNumber");
            VTDBaseGetter binding_getter4 = new VTDObjectGetter(pi7);
            VTDPropertyInfoBase pi8 = new VTDPropertyInfoBase("InputProperties","/*[local-name(.)='Request'][1]/*[local-name(.)='Imports'][1]/*[local-name(.)='MATERIAL'][1]");
            VTDBaseSetter binding_setter4 = new VTDXPathSetter(pi8,XmlTypeCode.String);
            binding_setter4 = new StringFormaterDecorator(binding_setter4,"{DataSource.MaterialNumbers.MaterialNumber}");
            bind_dir4 = new BindDirection(this.DataCursorActivity16,binding_getter4,binding_setter4,BindTargetType.ToInProperty);
            _flow.RfcCallActivityRT7.InDirections.Add(bind_dir4);
            XmlDocument RfcCallActivityRT7_ExpectedOutputProperties_Document = new XmlDocument();
            RfcCallActivityRT7_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RfcCallActivityRT7_ExpectedOutputProperties_Document.LoadXml(
@"<Response><Exports><DELETION_FLAG /><RETURN><TYPE /><ID /><NUMBER /><MESSAGE /><LOG_NO /><LOG_MSG_NO /><MESSAGE_V1 /><MESSAGE_V2 /><MESSAGE_V3 /><MESSAGE_V4 /></RETURN></Exports></Response>");
            _flow.RfcCallActivityRT7.ExpectedOutputProperties = RfcCallActivityRT7_ExpectedOutputProperties_Document;
            _flow.IfElse4.ConditionAsString = @"{Step.OutputProperties.RfcCallActivityRT7.Exports.RETURN.TYPE} Equal S";
            _flow.IfElse4.Comment = @"";
            _flow.IfElse4.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse4.Name = @"Material_Exists?";
            _flow.IfElse4.Activities.Add (_flow.IfElseBranch5);
            _flow.IfElse4.Activities.Add (_flow.IfElseBranch6);
            _flow.IfElseBranch5.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi9 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Response'][1]/*[local-name(.)='Exports'][1]/*[local-name(.)='RETURN'][1]/*[local-name(.)='TYPE'][1]");
            VTDBaseGetter binding_getter5 = new VTDXPathGetter(pi9,XmlTypeCode.String);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.RfcCallActivityRT7.GetParam(binding_getter5),typeof(System.String));
            		var result0 = expr00;
            		System.String result1 = (System.String)("S");
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch5.Comment = @"";
            _flow.IfElseBranch5.IconPath = @"";
            _flow.IfElseBranch5.Name = @"Yes";
            _flow.IfElseBranch5.Activities.Add (_flow.RfcCallActivityRT8);
            _flow.IfElseBranch6.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch6.Comment = @"";
            _flow.IfElseBranch6.IconPath = @"";
            _flow.IfElseBranch6.Name = @"No";
            _flow.IfElseBranch6.Activities.Add (_flow.RfcCallActivityRT9);
            _flow.IfElseBranch6.Activities.Add (_flow.RfcCallActivityRT10);
            XmlDocument RfcCallActivityRT8_InputProperties_Document = new XmlDocument();
            RfcCallActivityRT8_InputProperties_Document.PreserveWhitespace = true;
            RfcCallActivityRT8_InputProperties_Document.LoadXml(
@"<Request><Imports><MATERIAL>{Step.InputProperties.RfcCallActivityRT7.Imports.MATERIAL}</MATERIAL></Imports></Request>");
            _flow.RfcCallActivityRT8.InputProperties = RfcCallActivityRT8_InputProperties_Document;
            _flow.RfcCallActivityRT8.Comment = @"";
            _flow.RfcCallActivityRT8.IconPath = @"AddIns\ServiceTest\SAP\ictb_sap_rfc_16.png";
            _flow.RfcCallActivityRT8.Name = @"BAPI_MATERIAL_GET_DETAIL";
            _flow.RfcCallActivityRT8.FunctionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.RfcCallActivityRT8.FunctionName}")) ? @"BAPI_MATERIAL_GET_DETAIL" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.RfcCallActivityRT8.FunctionName}");
            _flow.RfcCallActivityRT8.Timeout = (int)100000;
            _flow.RfcCallActivityRT8.ExpectException = false;
            _flow.RfcCallActivityRT8.ConnectionInfo.Server = @"156.152.57.19";
            _flow.RfcCallActivityRT8.ConnectionInfo.SystemNumber = @"00";
            _flow.RfcCallActivityRT8.ConnectionInfo.Client = @"800";
            _flow.RfcCallActivityRT8.ConnectionInfo.Username = @"testuser";
            _flow.RfcCallActivityRT8.ConnectionInfo.Password = this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
            _flow.RfcCallActivityRT8.ConnectionInfo.Server = @"156.152.57.19";
            _flow.RfcCallActivityRT8.ConnectionInfo.SystemNumber = @"00";
            _flow.RfcCallActivityRT8.ConnectionInfo.Client = @"800";
            _flow.RfcCallActivityRT8.ConnectionInfo.Username = @"testuser";
            _flow.RfcCallActivityRT8.ConnectionInfo.Password = this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
            _flow.RfcCallActivityRT8.UseTransaction = false;
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("InputProperties","/*[local-name(.)='Request'][1]/*[local-name(.)='Imports'][1]/*[local-name(.)='MATERIAL'][1]");
            VTDBaseGetter binding_getter6 = new VTDXPathGetter(pi10,XmlTypeCode.String);
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("InputProperties","/*[local-name(.)='Request'][1]/*[local-name(.)='Imports'][1]/*[local-name(.)='MATERIAL'][1]");
            VTDBaseSetter binding_setter5 = new VTDXPathSetter(pi11,XmlTypeCode.String);
            binding_setter5 = new StringFormaterDecorator(binding_setter5,"{Step.InputProperties.RfcCallActivityRT7.Imports.MATERIAL}");
            bind_dir5 = new BindDirection(_flow.RfcCallActivityRT7,binding_getter6,binding_setter5,BindTargetType.ToInProperty);
            _flow.RfcCallActivityRT8.InDirections.Add(bind_dir5);
            XmlDocument RfcCallActivityRT8_ExpectedOutputProperties_Document = new XmlDocument();
            RfcCallActivityRT8_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RfcCallActivityRT8_ExpectedOutputProperties_Document.LoadXml(
@"<Response><Exports><MATERIALPLANTDATA><PUR_GROUP /><ISSUE_UNIT /></MATERIALPLANTDATA><MATERIALVALUATIONDATA><PRICE_CTRL /><MOVING_PR /><STD_PRICE /><PRICE_UNIT /><CURRENCY /><CURRENCY_ISO /></MATERIALVALUATIONDATA><MATERIAL_GENERAL_DATA><MATL_DESC /><OLD_MAT_NO /><MATL_TYPE /><IND_SECTOR /><DIVISION /><MATL_GROUP /><PROD_HIER /><BASIC_MATL /><STD_DESCR /><LAB_DESIGN /><PROD_MEMO /><PAGEFORMAT /><CONTAINER /><STOR_CONDS /><TEMP_CONDS /><BASE_UOM /><EAN_UPC /><EAN_CAT /><SIZE_DIM /><GROSS_WT /><NET_WEIGHT>{Step.OutputProperties.RfcCallActivityRT8.Exports.MATERIAL_GENERAL_DATA.GROSS_WT}</NET_WEIGHT><UNIT_OF_WT /><VOLUME /><VOLUMEUNIT /><LENGTH /><WIDTH /><HEIGHT /><UNIT_DIM /><MANU_MAT /><MFR_NO /><BASE_UOM_ISO /><UNIT_OF_WT_ISO /><VOLUMEUNIT_ISO /><UNIT_DIM_ISO /><CREATED_ON /><CREATED_BY /><LAST_CHNGE /><CHANGED_BY /><MATL_CAT /><EMPTIESBOM /><BASIC_MATL_NEW /></MATERIAL_GENERAL_DATA><RETURN><TYPE /><CODE /><MESSAGE /><LOG_NO /><LOG_MSG_NO /><MESSAGE_V1 /><MESSAGE_V2 /><MESSAGE_V3 /><MESSAGE_V4 /></RETURN></Exports></Response>");
            _flow.RfcCallActivityRT8.ExpectedOutputProperties = RfcCallActivityRT8_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Response'][1]/*[local-name(.)='Exports'][1]/*[local-name(.)='MATERIAL_GENERAL_DATA'][1]/*[local-name(.)='GROSS_WT'][1]");
            VTDBaseGetter binding_getter7 = new VTDXPathGetter(pi12,XmlTypeCode.Decimal);
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Response'][1]/*[local-name(.)='Exports'][1]/*[local-name(.)='MATERIAL_GENERAL_DATA'][1]/*[local-name(.)='NET_WEIGHT'][1]");
            VTDBaseSetter binding_setter6 = new VTDCheckpointSetter(XmlTypeCode.Decimal);
            bind_dir6 = new BindDirection(_flow.RfcCallActivityRT8,binding_getter7,binding_setter6,BindTargetType.ToInProperty);
            set_RfcCallActivityRT8_checkpoints(_flow.RfcCallActivityRT8);
            XmlDocument RfcCallActivityRT9_InputProperties_Document = new XmlDocument();
            RfcCallActivityRT9_InputProperties_Document.PreserveWhitespace = true;
            RfcCallActivityRT9_InputProperties_Document.LoadXml(
@"<Request><Imports><CLIENTDATA><DEL_FLAG /><MATL_GROUP></MATL_GROUP><OLD_MAT_NO /><BASE_UOM>EA</BASE_UOM><BASE_UOM_ISO>EA</BASE_UOM_ISO><PO_UNIT /><PO_UNIT_ISO /><DOCUMENT /><DOC_TYPE /><DOC_VERS /><DOC_FORMAT /><DOC_CHG_NO /><PAGE_NO /><NO_SHEETS /><PROD_MEMO /><PAGEFORMAT /><SIZE_DIM /><BASIC_MATL /><STD_DESCR /><DSN_OFFICE /><PUR_VALKEY /><NET_WEIGHT /><UNIT_OF_WT /><UNIT_OF_WT_ISO /><CONTAINER /><STOR_CONDS /><TEMP_CONDS /><TRANS_GRP /><HAZ_MAT_NO /><DIVISION /><COMPETITOR /><QTY_GR_GI /><PROC_RULE /><SUP_SOURCE /><SEASON /><LABEL_TYPE /><LABEL_FORM /><PROD_HIER /><CAD_ID /><ALLOWED_WT /><PACK_WT_UN /><PACK_WT_UN_ISO /><ALLWD_VOL /><PACK_VO_UN /><PACK_VO_UN_ISO /><WT_TOL_LT /><VOL_TOL_LT /><VAR_ORD_UN /><BATCH_MGMT /><SH_MAT_TYP /><FILL_LEVEL /><STACK_FACT /><MAT_GRP_SM /><AUTHORITYGROUP /><QM_PROCMNT /><CATPROFILE /><MINREMLIFE /><SHELF_LIFE /><STOR_PCT /><PUR_STATUS /><SAL_STATUS /><PVALIDFROM /><SVALIDFROM /><ENVT_RLVT /><PROD_ALLOC /><QUAL_DIK /><MANU_MAT /><MFR_NO /><INV_MAT_NO /><MANUF_PROF /><HAZMATPROF /><HIGH_VISC /><LOOSEORLIQ /><CLOSED_BOX /><APPD_B_REC /><MATCMPLLVL /><PAR_EFF /><ROUND_UP_RULE_EXPIRATION_DATE /><PERIOD_IND_EXPIRATION_DATE /><PROD_COMPOSITION_ON_PACKAGING /><ITEM_CAT /><HAZ_MAT_NO_EXTERNAL /><HAZ_MAT_NO_GUID /><HAZ_MAT_NO_VERSION /><INV_MAT_NO_EXTERNAL /><INV_MAT_NO_GUID /><INV_MAT_NO_VERSION /><MATERIAL_FIXED /><CM_RELEVANCE_FLAG /><SLED_BBD /><GTIN_VARIANT /><SERIALIZATION_LEVEL /><PL_REF_MAT /><EXTMATLGRP /><UOMUSAGE /><GDS_RELEVANT /><PL_REF_MAT_EXTERNAL /><PL_REF_MAT_GUID /><PL_REF_MAT_VERSION /><WE_ORIGIN_ACCEPTANCE /></CLIENTDATA><CLIENTDATAX><DEL_FLAG /><MATL_GROUP>X</MATL_GROUP><OLD_MAT_NO /><BASE_UOM>X</BASE_UOM><BASE_UOM_ISO>X</BASE_UOM_ISO><PO_UNIT /><PO_UNIT_ISO /><DOCUMENT /><DOC_TYPE /><DOC_VERS /><DOC_FORMAT /><DOC_CHG_NO /><PAGE_NO /><NO_SHEETS /><PROD_MEMO /><PAGEFORMAT /><SIZE_DIM /><BASIC_MATL /><STD_DESCR /><DSN_OFFICE /><PUR_VALKEY /><NET_WEIGHT /><UNIT_OF_WT /><UNIT_OF_WT_ISO /><CONTAINER /><STOR_CONDS /><TEMP_CONDS /><TRANS_GRP /><HAZ_MAT_NO /><DIVISION /><COMPETITOR /><QTY_GR_GI /><PROC_RULE /><SUP_SOURCE /><SEASON /><LABEL_TYPE /><LABEL_FORM /><PROD_HIER /><CAD_ID /><ALLOWED_WT /><PACK_WT_UN /><PACK_WT_UN_ISO /><ALLWD_VOL /><PACK_VO_UN /><PACK_VO_UN_ISO /><WT_TOL_LT /><VOL_TOL_LT /><VAR_ORD_UN /><BATCH_MGMT /><SH_MAT_TYP /><FILL_LEVEL /><STACK_FACT /><MAT_GRP_SM /><AUTHORITYGROUP /><QM_PROCMNT /><CATPROFILE /><MINREMLIFE /><SHELF_LIFE /><STOR_PCT /><PUR_STATUS /><SAL_STATUS /><PVALIDFROM /><SVALIDFROM /><ENVT_RLVT /><PROD_ALLOC /><QUAL_DIK /><MANU_MAT /><MFR_NO /><INV_MAT_NO /><MANUF_PROF /><HAZMATPROF /><HIGH_VISC /><LOOSEORLIQ /><CLOSED_BOX /><APPD_B_REC /><MATCMPLLVL /><PAR_EFF /><ROUND_UP_RULE_EXPIRATION_DATE /><PERIOD_IND_EXPIRATION_DATE /><PROD_COMPOSITION_ON_PACKAGING /><ITEM_CAT /><HAZ_MAT_NO_EXTERNAL /><HAZ_MAT_NO_GUID /><HAZ_MAT_NO_VERSION /><INV_MAT_NO_EXTERNAL /><INV_MAT_NO_GUID /><INV_MAT_NO_VERSION /><MATERIAL_FIXED /><CM_RELEVANCE_FLAG /><SLED_BBD /><GTIN_VARIANT /><SERIALIZATION_LEVEL /><PL_REF_MAT /><EXTMATLGRP /><UOMUSAGE /><GDS_RELEVANT /><PL_REF_MAT_EXTERNAL /><PL_REF_MAT_GUID /><PL_REF_MAT_VERSION /><WE_ORIGIN_ACCEPTANCE /></CLIENTDATAX><HEADDATA><MATERIAL>{Step.InputProperties.RfcCallActivityRT7.Imports.MATERIAL}</MATERIAL><IND_SECTOR>P</IND_SECTOR><MATL_TYPE>VKHM</MATL_TYPE><BASIC_VIEW>X</BASIC_VIEW><SALES_VIEW /><PURCHASE_VIEW /><MRP_VIEW /><FORECAST_VIEW /><WORK_SCHED_VIEW /><PRT_VIEW /><STORAGE_VIEW /><WAREHOUSE_VIEW /><QUALITY_VIEW /><ACCOUNT_VIEW /><COST_VIEW /><INP_FLD_CHECK /><MATERIAL_EXTERNAL /><MATERIAL_GUID /><MATERIAL_VERSION /></HEADDATA></Imports><Tables><MATERIALDESCRIPTION><LANGU>E</LANGU><LANGU_ISO>EN</LANGU_ISO><MATL_DESC>My Material</MATL_DESC><DEL_FLAG /></MATERIALDESCRIPTION></Tables></Request>");
            _flow.RfcCallActivityRT9.InputProperties = RfcCallActivityRT9_InputProperties_Document;
            _flow.RfcCallActivityRT9.Comment = @"";
            _flow.RfcCallActivityRT9.IconPath = @"AddIns\ServiceTest\SAP\ictb_sap_rfc_16.png";
            _flow.RfcCallActivityRT9.Name = @"BAPI_MATERIAL_SAVEDATA";
            _flow.RfcCallActivityRT9.FunctionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.RfcCallActivityRT9.FunctionName}")) ? @"BAPI_MATERIAL_SAVEDATA" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.RfcCallActivityRT9.FunctionName}");
            _flow.RfcCallActivityRT9.Timeout = (int)100000;
            _flow.RfcCallActivityRT9.ExpectException = false;
            _flow.RfcCallActivityRT9.ConnectionInfo.Server = @"156.152.57.19";
            _flow.RfcCallActivityRT9.ConnectionInfo.SystemNumber = @"00";
            _flow.RfcCallActivityRT9.ConnectionInfo.Client = @"800";
            _flow.RfcCallActivityRT9.ConnectionInfo.Username = @"testuser";
            _flow.RfcCallActivityRT9.ConnectionInfo.Password = this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
            _flow.RfcCallActivityRT9.ConnectionInfo.Server = @"156.152.57.19";
            _flow.RfcCallActivityRT9.ConnectionInfo.SystemNumber = @"00";
            _flow.RfcCallActivityRT9.ConnectionInfo.Client = @"800";
            _flow.RfcCallActivityRT9.ConnectionInfo.Username = @"testuser";
            _flow.RfcCallActivityRT9.ConnectionInfo.Password = this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
            _flow.RfcCallActivityRT9.UseTransaction = false;
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("InputProperties","/*[local-name(.)='Request'][1]/*[local-name(.)='Imports'][1]/*[local-name(.)='MATERIAL'][1]");
            VTDBaseGetter binding_getter8 = new VTDXPathGetter(pi14,XmlTypeCode.String);
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("InputProperties","/*[local-name(.)='Request'][1]/*[local-name(.)='Imports'][1]/*[local-name(.)='HEADDATA'][1]/*[local-name(.)='MATERIAL'][1]");
            VTDBaseSetter binding_setter7 = new VTDXPathSetter(pi15,XmlTypeCode.String);
            binding_setter7 = new StringFormaterDecorator(binding_setter7,"{Step.InputProperties.RfcCallActivityRT7.Imports.MATERIAL}");
            bind_dir7 = new BindDirection(_flow.RfcCallActivityRT7,binding_getter8,binding_setter7,BindTargetType.ToInProperty);
            _flow.RfcCallActivityRT9.InDirections.Add(bind_dir7);
            XmlDocument RfcCallActivityRT9_ExpectedOutputProperties_Document = new XmlDocument();
            RfcCallActivityRT9_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RfcCallActivityRT9_ExpectedOutputProperties_Document.LoadXml(
@"<Response><Exports><RETURN><TYPE>S</TYPE><ID /><NUMBER /><MESSAGE /><LOG_NO /><LOG_MSG_NO /><MESSAGE_V1 /><MESSAGE_V2 /><MESSAGE_V3 /><MESSAGE_V4 /><PARAMETER /><ROW /><FIELD /><SYSTEM /></RETURN></Exports><Tables /></Response>");
            _flow.RfcCallActivityRT9.ExpectedOutputProperties = RfcCallActivityRT9_ExpectedOutputProperties_Document;
            set_RfcCallActivityRT9_checkpoints(_flow.RfcCallActivityRT9);
            XmlDocument RfcCallActivityRT10_InputProperties_Document = new XmlDocument();
            RfcCallActivityRT10_InputProperties_Document.PreserveWhitespace = true;
            RfcCallActivityRT10_InputProperties_Document.LoadXml(
@"<Request><Imports /></Request>");
            _flow.RfcCallActivityRT10.InputProperties = RfcCallActivityRT10_InputProperties_Document;
            _flow.RfcCallActivityRT10.Comment = @"";
            _flow.RfcCallActivityRT10.IconPath = @"AddIns\ServiceTest\SAP\ictb_sap_rfc_16.png";
            _flow.RfcCallActivityRT10.Name = @"BAPI_TRANSACTION_COMMIT";
            _flow.RfcCallActivityRT10.FunctionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.RfcCallActivityRT10.FunctionName}")) ? @"BAPI_TRANSACTION_COMMIT" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.RfcCallActivityRT10.FunctionName}");
            _flow.RfcCallActivityRT10.Timeout = (int)100000;
            _flow.RfcCallActivityRT10.ExpectException = false;
            _flow.RfcCallActivityRT10.ConnectionInfo.Server = @"156.152.57.19";
            _flow.RfcCallActivityRT10.ConnectionInfo.SystemNumber = @"00";
            _flow.RfcCallActivityRT10.ConnectionInfo.Client = @"800";
            _flow.RfcCallActivityRT10.ConnectionInfo.Username = @"testuser";
            _flow.RfcCallActivityRT10.ConnectionInfo.Password = this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
            _flow.RfcCallActivityRT10.ConnectionInfo.Server = @"156.152.57.19";
            _flow.RfcCallActivityRT10.ConnectionInfo.SystemNumber = @"00";
            _flow.RfcCallActivityRT10.ConnectionInfo.Client = @"800";
            _flow.RfcCallActivityRT10.ConnectionInfo.Username = @"testuser";
            _flow.RfcCallActivityRT10.ConnectionInfo.Password = this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
            _flow.RfcCallActivityRT10.UseTransaction = false;
            XmlDocument RfcCallActivityRT10_ExpectedOutputProperties_Document = new XmlDocument();
            RfcCallActivityRT10_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RfcCallActivityRT10_ExpectedOutputProperties_Document.LoadXml(
@"<Response><Exports><RETURN><TYPE /><ID /><NUMBER /><MESSAGE /><LOG_NO /><LOG_MSG_NO /><MESSAGE_V1 /><MESSAGE_V2 /><MESSAGE_V3 /><MESSAGE_V4 /><PARAMETER /><ROW /><FIELD /><SYSTEM /></RETURN></Exports></Response>");
            _flow.RfcCallActivityRT10.ExpectedOutputProperties = RfcCallActivityRT10_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        	this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
        	this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
        	this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
        	this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
        	this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
        	this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
        	this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
        	this._context.EncryptionMngr.Decrypt("pU+jTGGyIq2B23dhoOCneg==");
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    